[package]
name = "dilib"
description = "A dependency injection library for Rust"
keywords = ["rust-patterns"]
version = "0.2.0-alpha"
authors = ["Freddy L."]
edition = "2021"
license-file = "LICENSE"
repository = "https://github.com/Neo-Ciber94/dilib-rs/"
homepage = "https://crates.io/crates/dilib/"
documentation = "https://docs.rs/dilib/"
rust-version = "1.59.0"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "doc_cfg"]

[features]
# Nothing by default
default=[]

# All features excluding unstables
full = ["derive", "global", "lazy"]

# Enables #[derive(Inject)] proc macro
derive = ["dilib-derive"]

# Enables global `Container`
global = []

# Enables lazy singletons
lazy = ["once_cell"]

# Enables #[provide(...)] proc macro for global `Container`.
# This feature is considered unstable because `Rust` does not guarantee
# that code will always be allowed to executed before `main`
# until global constructor get implemented, if ever happen.
unstable_provide = ["dilib-macros", "global", "ctor", "lazy"]

[dependencies]
dilib-derive = { path="../dilib-derive", optional = true }
dilib-macros = { path = "../dilib-macros", optional = true}
ctor = { version ="0.1.22", optional = true }
once_cell = { version = "1.10.0", optional = true }

[dev-dependencies]
dilib-derive = { path="../dilib-derive" }
dilib = { path = ".", features=["full", "unstable_provide"]}